

public class Pair{
    int f,s;
    Pair(int f,int s){
        this.f = f;
        this.s = s;
    }
}

class Solution {
    
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        
        int visited[] = new int[V];
        for(int i=0;i<V;i++){
            if(visited[i]==0){
                if(bfs(adj,i,visited)){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean bfs(ArrayList<ArrayList<Integer>> adj,int x,int visited[]){
        visited[x] = 1;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(x,-1));
        while(!q.isEmpty()){
            int node = q.peek().f;
            int parent = q.peek().s;
            q.poll();
            for(int adjNode:adj.get(node)){
                if(visited[adjNode]==0){
                    q.add(new Pair(adjNode,node));
                    visited[adjNode]=1;
                }
                else if(adjNode!=parent){
                    return true;
                }
            }
        }
        return false;
    }
    
}
