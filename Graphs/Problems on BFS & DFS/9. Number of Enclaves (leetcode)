
class Solution {
    
    public int numEnclaves(int[][] grid) {
        
        int n = grid.length;
        int m = grid[0].length;
        int visited[][] = new int[n][m];
        int delrow[] = {-1,0,+1,0};
        int delcol[] = {0,+1,0,-1};
        for(int i=0;i<m;i++){
            if(grid[0][i]==1 && visited[0][i]==0){
                dfs(grid,0,i,visited,n,m,delrow,delcol);
            }
            if(grid[n-1][i]==1 && visited[n-1][i]==0){
                dfs(grid,n-1,i,visited,n,m,delrow,delcol);
            }
        }
        for(int i=0;i<n;i++){
            if(grid[i][0]==1 && visited[i][0]==0){
                dfs(grid,i,0,visited,n,m,delrow,delcol);
            }
            if(grid[i][m-1]==1 && visited[i][m-1]==0){
                dfs(grid,i,m-1,visited,n,m,delrow,delcol);
            }
        }
        int count = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && visited[i][j]==0){
                    count++;
                }
            }
        }
        return count;
    }

    public static void dfs(int grid[][],int row,int col,int visited[][],int n,int m,int delrow[],int delcol[]){
        visited[row][col] = 1;
        for(int i=0;i<4;i++){
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==1 && visited[nrow][ncol]==0){
                dfs(grid,nrow,ncol,visited,n,m,delrow,delcol);
            }
        }
    }

}

