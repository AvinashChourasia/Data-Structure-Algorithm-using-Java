
class Solution {
    
    public void solve(char[][] board) {
        
        int n = board.length;
        int m = board[0].length;
        int visited[][] = new int[n][m];
        int delrow[] = {-1,0,+1,0};
        int delcol[] = {0,+1,0,-1};
        for(int i=0;i<m;i++){
            if(board[0][i]=='O' && visited[0][i]==0){
                dfs(board,0,i,visited,n,m,delrow,delcol);
            }
            if(board[n-1][i]=='O' && visited[n-1][i]==0){
                dfs(board,n-1,i,visited,n,m,delrow,delcol);
            }
        }
        for(int i=0;i<n;i++){
            if(board[i][0]=='O' && visited[i][0]==0){
                dfs(board,i,0,visited,n,m,delrow,delcol);
            }
            if(board[i][m-1]=='O' && visited[i][m-1]==0){
                dfs(board,i,m-1,visited,n,m,delrow,delcol);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O' && visited[i][j]==0){
                    board[i][j] = 'X';
                }
            }
        }
    }

    public void dfs(char board[][],int row,int col,int visited[][],int n,int m,int delrow[],int delcol[]){
        visited[row][col] = 1;
        for(int i=0;i<4;i++){
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && board[nrow][ncol]=='O' && visited[nrow][ncol]==0){
                dfs(board,nrow,ncol,visited,n,m,delrow,delcol);
            }
        } 
    }

}
